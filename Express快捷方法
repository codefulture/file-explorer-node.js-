Express为node中的request盒response对象提供了一系列扩展来简化开发。
Request对象上扩展如下。

1.header：此扩展能够让程序以函数的方式获取头信息，并且还是大小写不敏感
req.header('Host')
req.header('host')

2.accepts:此扩展会分析请求中的Accept头信息，并根据提供的值返回true或者false
req.accepts('html')
req.accepts('text/html')

3.is:此扩展和accepts类似，但它检查Content—Type头信息
req.is('json')
req.is('text/html')

4.header:此扩展接收一个参数来检查对应的头信息是否已经在response上设置了。
res.header('content-type')或设置header的两个参数：
rse.header('content-type','application/json')

5.render:在以前的例子中，传递了status值。设置了它就等于为response响应对象设置了状态码
除此之外，还可以提供第三个参数给render方法来获取HTML内容而不是直接将其作为响应信息自动传递出去。
res.render('template',function(err,html){
  //处理收到的html
});

6.send:它会根据提供参数的类型执行响应的行为。
Number：发送状态码。res.send(500);
String:发送HTML内容。
res.send('<p>html</p>');
Object/Array:序列化成JSON对象，并设置响应的Content-Type头信息。
res.send({hello:'world'}); res.send([1,2,3]);

7.json:此扩展在绝大多数场景下和send类似。只是他会显式地将内容作为JSON对象发送。
res.json(5);
在发送值类型位置的情况下可以使用此方法。
res.send会判断发送值的类型，并且一句判断解惑来选择是否调用JSON.stringify方法。
如果是数字类型，会认为发送的是状态码，并直接结束响应。
而res.json会发数字类型也进行JSON.stringify转换。

8.redirect:redirect的等效于发送302（暂时移除）状态码以及Location头信息。
res.reditect('/some.other.url')等效于：
res.header('Location','/some/other/url');
res.send(302);在Node.js内部是这样处理的：
res.writeHead(302,{'Location':'/some/other/url'});

9.redirect还可以接收自定义的状态码作为第二个参数。
假设你不想发送302而发送表示永久性移除的301状态码。则采取如下方式：
res.redirect('some/other/url',301)

10.sendfile:此扩展和Connect中的static中间件类似，不同之处在于它用于单个文件。
res.sendfile('image.jpg')
